{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84623360},"metadata":{"hide_input":false,"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"latex_envs":{"LaTeX_envs_menu_present":true,"autoclose":false,"autocomplete":true,"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":1,"hotkeys":{"equation":"Ctrl-E","itemize":"Ctrl-I"},"labels_anchors":false,"latex_user_defs":false,"report_style_numbering":true,"user_envs_cfg":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1588097072975,"exec_count":10,"id":"0a05d1","input":"%matplotlib inline\nplot(mesh, interactive=True)\n#plot(u, interactive=True)","kernel":"python3","output":{"0":{"ename":"NotImplementedError","evalue":"It is not currently possible to manually set the aspect on 3D axes","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-4b7517b8d8c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'matplotlib'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'inline'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmesh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minteractive\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m#plot(u, interactive=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/dolfin/common/plotting.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(object, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[0;31m# Plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mbackend\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"matplotlib\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 438\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_plot_matplotlib\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmesh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    439\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mbackend\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"x3dom\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_plot_x3dom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/dolfin/common/plotting.py\u001b[0m in \u001b[0;36m_plot_matplotlib\u001b[0;34m(obj, mesh, kwargs)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m     \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_aspect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'equal'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"title\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mset_aspect\u001b[0;34m(self, aspect, adjustable, anchor, share)\u001b[0m\n\u001b[1;32m   1262\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_str_equal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maspect\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'3d'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1263\u001b[0m             raise NotImplementedError(\n\u001b[0;32m-> 1264\u001b[0;31m                 \u001b[0;34m'It is not currently possible to manually set the aspect '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1265\u001b[0m                 'on 3D axes')\n\u001b[1;32m   1266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: It is not currently possible to manually set the aspect on 3D axes"]},"1":{"data":{"image/png":"248f1eaa498a94f0625f0511c2bd9412987b98d1","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":231,"width":349},"needs_background":"light"}}},"pos":15,"start":1588097071688,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097078306,"exec_count":11,"id":"d37470","input":"\nFile('Displacement_Field20.xml') << u","kernel":"python3","pos":17,"start":1588097078302,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097082723,"exec_count":12,"id":"054e92","input":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nu= Function(V, 'Displacement_Field20.xml')\n\n\n\n\n\nNpoints=101\nmidline_x = np.linspace(0+tol, Length-tol, Npoints)\nmidline_points=[(x_, W/2, W/2) for x_ in  midline_x]\nmidline_u = np.array([u(point) for point in midline_points])\n\n\nplt.plot(midline_x, midline_u[:,2])\nplt.xlabel('$x_1$')\nplt.ylabel('$u_3$')\nplt.title('Deflection of a cantilever beam under self weight')\nplt.show()\nplt.savefig('3DBeam_s11.pdf')\n\n\nx2 = np.linspace(0+tol, W-tol, Npoints)\nx3= np.linspace(0+tol, W-tol, Npoints, Npoints)\nX2, X3 = np.meshgrid(x2, x3)\n#\nU2=np.empty([Npoints,Npoints])\n#\nfor i in range(0,Npoints,1):\n    for j in range(0,Npoints,1):\n        #print(i,j)\n        uv=u((Length/2, x2[i], x3[j]))\n        U2[i,j]=uv[2]\n\nplt.figure()\nCS=plt.contour(X2,X3, 1000*U2,colors='k')\nplt.clabel(CS, fontsize=10)\nplt.xlabel( \"$x_2$\",fontsize=20)\nplt.ylabel( \"$x_3$\",fontsize=20)\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"87fcc672946d36ae44839f12ad775c1491813165","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":392},"needs_background":"light"}},"1":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"}},"2":{"data":{"image/png":"2ce316f4a3ff49852d68f0a7c975cc0e9b962f1a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":276,"width":413},"needs_background":"light"}}},"pos":19,"start":1588097080640,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097101040,"exec_count":13,"id":"e775be","input":"# # Compute stress\nst = sigma(u)\nst = project(st, Vt)\ns11, s12, s13, s21, s22, s23, s31, s32, s33 = st.split(deepcopy=True)\nprint(\"Calculation of stress components complete\")\n\n\nex = Constant((-1.0, 0.0, 0.0))\ney = Constant((0.0, 1.0, 0.0))\nez = Constant((0.0, 0.0, 1.0))","kernel":"python3","output":{"0":{"name":"stdout","text":"Calculation of stress components complete\n"}},"pos":21,"start":1588097092457,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097101124,"exec_count":14,"id":"e3541f","input":"markers = FaceFunctionSizet(mesh, 1)\nTopBoundary().mark(markers, 1)\nLeftBoundary().mark(markers, 2)\nds = ds[markers]\n\nfx = dot(dot(st, ex), ex) * ds(2, domain=mesh)\nfy = dot(dot(st, ex), ey) * ds(2, domain=mesh)\nfz = dot(dot(st, ex), ez) * ds(2, domain=mesh)\n\nfx = assemble(fx)\nfy = assemble(fy)\nfz = assemble(fz)","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'FaceFunctionSizet' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-8b43b1a8c1fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmarkers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFaceFunctionSizet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmesh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mTopBoundary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmark\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mLeftBoundary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmark\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmarkers\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'FaceFunctionSizet' is not defined"]}},"pos":23,"start":1588097101101,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097109346,"exec_count":15,"id":"643fdc","input":"# Lagrangian coordinates\nX1=mesh.coordinates()[:,0].copy()\nX2=mesh.coordinates()[:,1].copy()\nX3=mesh.coordinates()[:,2].copy()\nx1=mesh.coordinates()[:,0].copy()\nx2=mesh.coordinates()[:,1].copy()\nx3=mesh.coordinates()[:,2].copy()","kernel":"python3","pos":26,"start":1588097109340,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097112546,"exec_count":16,"id":"1513ce","input":"\n# Eulerian coordinates\n \nclass EulerianPoint:\n    \"\"\" A class represents and manipulates x,y coords. \"\"\"\n\n    def __init__(self, X1=0.0,X2=0.0,X3=0.0,u1=0.0,u2=0.0,u3=0.0,alpha=1.0):\n        \"\"\" Create a new point at the origin \"\"\"\n        self.x1=X1+alpha*u1\n        self.x2=X2+alpha*u2\n        self.x3=X3+alpha*u3\n        \n\n        \n\nfor i in range(len(X1)):\n    [u1, u2, u3]=u((X1[i],X2[i],X3[i]))\n    x=EulerianPoint(X1[i],X2[i],X3[i],u1,u2,u3,2)\n    x1[i]=x.x1\n    x2[i]=x.x2\n    x3[i]=x.x3\n    \n    ","kernel":"python3","pos":27,"start":1588097112539,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097115411,"exec_count":17,"id":"ff8954","input":"DefMesh = BoxMesh(Point(0, 0, 0), Point(Length, W, W), nx, ny, nz)\nxyz_cords=np.array([x1, x2, x3]).transpose()\nDefMesh.coordinates()[:]=xyz_cords\n[DefMesh,mesh]","kernel":"python3","output":{"0":{"data":{"text/plain":"[<dolfin.cpp.generation.BoxMesh at 0x7fbf519bae08>,\n <dolfin.cpp.generation.BoxMesh at 0x7fbf6451fb48>]"},"exec_count":17}},"pos":28,"start":1588097115405,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097119622,"exec_count":18,"id":"9e90d4","input":"DefMesh","kernel":"python3","output":{"0":{"data":{"iframe":"a7d8df8ade23c3f9f095504192bf27c16098346b","text/plain":"<dolfin.cpp.generation.BoxMesh at 0x7fbf519bae08>"},"exec_count":18}},"pos":29,"start":1588097119604,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097132873,"exec_count":19,"id":"814d60","input":"mesh","kernel":"python3","output":{"0":{"data":{"iframe":"46187a2a4ace616722547d89998fc4d1464384bd","text/plain":"<dolfin.cpp.generation.BoxMesh at 0x7fbf6451fb48>"},"exec_count":19}},"pos":30,"start":1588097132764,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097915565,"exec_count":23,"id":"ccc22e","input":"nx","kernel":"python3","output":{"0":{"data":{"text/plain":"10"},"exec_count":23}},"pos":31,"start":1588097915559,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097951510,"exec_count":1,"id":"5fc4eb","input":"import numpy as np\nfrom SDomains import *\nfrom fenics import *\nfrom dolfin import *","kernel":"python3","pos":2,"start":1588097941702,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097955176,"exec_count":2,"id":"a1b511","input":"# Geometry and Material Parameters\nfrom MatGeoProp import W, Length\nfrom MatGeoProp import nx, ny, nz, tol\nfrom MatGeoProp import rho, g","kernel":"python3","pos":3,"start":1588097955168,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097974377,"exec_count":3,"id":"90a44c","input":"# Create mesh and define function space\nmesh = BoxMesh(Point(0, 0, 0), Point(Length, W, W), nx, ny, nz)\n\n# V = VectorFunctionSpace(mesh, 'CG', 1,3)\n# Vt = TensorFunctionSpace(mesh, 'CG', 1)\n\nV = VectorFunctionSpace(mesh, 'CG', 2,3)\nVt = TensorFunctionSpace(mesh, 'CG', 2)\n\n\n# V = VectorFunctionSpace(mesh, 'P', 1)\n# Vt = TensorFunctionSpace(mesh, 'P', 1)\n\n# V = VectorFunctionSpace(mesh, 'P', 2)\n# Vt = TensorFunctionSpace(mesh, 'P', 2)","kernel":"python3","pos":4,"start":1588097959124,"state":"done","type":"cell"}
{"cell_type":"code","end":1588097990160,"exec_count":4,"id":"6041cb","input":"mesh # visualize the mesh","kernel":"python3","output":{"0":{"data":{"iframe":"0b72afb0fd6dfc59bd8bb1dbeb61c753be887bfd","text/plain":"<dolfin.cpp.generation.BoxMesh at 0x7f7562984b48>"},"exec_count":4}},"pos":5,"start":1588097989364,"state":"done","type":"cell"}
{"cell_type":"code","end":1588098009011,"exec_count":5,"id":"ad746b","input":"from ufl import nabla_div","kernel":"python3","pos":7,"start":1588098009006,"state":"done","type":"cell"}
{"cell_type":"code","end":1588098011441,"exec_count":6,"id":"fb2e1f","input":"from MatGeoProp import tol\ndef clamped_boundary(x, on_boundary):\n    return on_boundary and x[0] < tol\n\nbc = DirichletBC(V, Constant((0, 0, 0)), clamped_boundary)","kernel":"python3","pos":8,"start":1588098011419,"state":"done","type":"cell"}
{"cell_type":"code","end":1588098014839,"exec_count":7,"id":"aed116","input":"#Define function spaces\nu = TrialFunction(V)\nv = TestFunction(V)\n\n# Define Variational Problem\nfrom MatGeoProp import lambda_, mu\nd = u.geometric_dimension()  # space dimension\ndef epsilon(u):\n    return 0.5 * (nabla_grad(u) + nabla_grad(u).T)\n\n\ndef sigma(u):\n    return lambda_ * nabla_div(u) * Identity(d) + 2 * mu * epsilon(u)# Compute solution","kernel":"python3","pos":10,"start":1588098014835,"state":"done","type":"cell"}
{"cell_type":"code","end":1588098017634,"exec_count":8,"id":"439e04","input":"f = Constant((0, 0, rho * g))\nT = Constant((0, 0, 0))\n\na = inner(sigma(u), epsilon(v)) * dx\nL = dot(f, v) * dx + dot(T, v) * ds","kernel":"python3","pos":12,"start":1588098017630,"state":"done","type":"cell"}
{"cell_type":"code","end":1588098046065,"exec_count":2,"id":"2e9796","input":"# Compute solution\nu = Function(V)\nproblem = LinearVariationalProblem(a, L, u, bc)\nsolver = LinearVariationalSolver(problem)\nsolver.parameters[\"linear_solver\"] = \"cg\"\nsolver.solve()  # solve(a==L,u,bc)","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'Function' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-4969fc4d0e7f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Compute solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mV\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mproblem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearVariationalProblem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msolver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearVariationalSolver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproblem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"linear_solver\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"cg\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Function' is not defined"]}},"pos":14,"start":1588098046056,"state":"done","type":"cell"}
{"cell_type":"code","id":"90ead5","input":"from dolfin.cpp.mesh import Face","pos":22,"state":"done","type":"cell"}
{"cell_type":"code","id":"a8fc51","input":"fz","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"113bbe","input":"<h4>Solve<h4>","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"242bc4","input":"<h4>Define loading<h4>","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"24c14d","input":"<h4>Extract displacements from saved file<h4>","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c9e17","input":"#### Define Boundary Conditions ####","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8132df","input":"\n\n* _**Example 3D elasticity simulation**_\n    * Creating and visualizing the mesh\n    * Set up and solution of a 3D elasticity problem \n    * Saving the solution as an xml file\n    * Reading an xml file and plotting displacent along a space curve\n    * Contour plot of a displacement component, e.g., $u_3$, on a cross-section of the beam\n    * Computation of sress and forces from the continuum mechanics forms\n    * Creating the defomed mesh\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"87f4be","input":"#### Creating the deformed mesh ####","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b9d182","input":"<h4>Computation of stress<h4>","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e285c1","input":"<h4>Define stress and strain<h4>","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e61e70","input":"<h4>Save<h4>","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"eff585","input":"Three 3D Elasticity-beam problem\n===\n\nHaneesh_Kesari@brown.edu","pos":0,"state":"done","type":"cell"}
{"id":"8a4ce5","input":"","pos":32,"state":"done","type":"cell"}
{"id":0,"time":1588103216643,"type":"user"}
{"last_load":1588096639631,"type":"file"}